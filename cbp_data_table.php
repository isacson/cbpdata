<?php require_once 'functions.php'; 

// This page shows a table of U.S.-Mexico border-specific results from CBP's dataset of migration data dating back to fiscal year 2020. It serves data based on criteria chosen at the index.php page in this same folder.

/* CBP changed their notation from "UC / Single Minors" to "UAC". Let's get rid of "UAC" in the dataset where it appears, so that we're searching for the same thing. */

try {
    // Connect to the database using PDO

    // Step 1: Check if "UAC" exists in the demographic column
    $checkQuery = "SELECT COUNT(*) FROM data WHERE demographic = 'UAC'";
    $stmt = $pdo->prepare($checkQuery);
    $stmt->execute();
    $count = $stmt->fetchColumn();

    // Step 2: If "UAC" exists, update it to "UC / Single Minors"
    if ($count > 0) {
        $updateQuery = "UPDATE data SET demographic = 'UC / Single Minors' WHERE demographic = 'UAC'";
        $updateStmt = $pdo->prepare($updateQuery);
        $updateStmt->execute();
    }
} catch (PDOException $e) {
    // Handle potential errors gracefully
    error_log("Database error: " . $e->getMessage());
}

// Let's grab the variables that index.php sent over:

// Should the table columns be years or months? 
	if (isset($_GET["time_period"]) && $_GET["time_period"] != "") {
		$time_period = $_GET["time_period"];
		if ($time_period == "months")  {
			// All the variables that start with "$title" are just bits of the title text that will appear at the top of the page to tell users what's in the table that they're viewing.
			$title_time_period = "Monthly";
		}
		if ($time_period == "years")  {
			$title_time_period = "Yearly";
		}
	}

	// what should the table rows be?
	if (isset($_GET["organized_by"]) && $_GET["organized_by"] != "") {
		$organized_by = $_GET["organized_by"];

		switch ($organized_by) {
			case "by_nationality":
				$title_organized_by = "Nationality";
				// The "$organized_by_query_field" variable specifies what column name comes after "SELECT" when MySQL queries CBP's dataset
				$organized_by_query_field = "citizenship";
				break;
			case "by_demographic":
				$title_organized_by = "Demographic Category";
				$organized_by_query_field = "demographic";
				break;
			case "by_geographic_area":
				$title_organized_by = "Geographic Area";
				$organized_by_query_field = "area_of_responsibility";
				break;
			case "by_agency":
				$title_organized_by = "Whether Encountered At or Between Ports of Entry";
				$organized_by_query_field = "component";
				break;
			case "by_state":
				$title_organized_by = "U.S. State";
				$organized_by_query_field = "state";
				break;
			case "by_title":
				$title_organized_by = "Whether Processed By Title 8 or Title 42";
				$organized_by_query_field = "title_of_authority";
				break;
			case "by_nothing":
				$title_organized_by = "No Criteria";
				$organized_by_query_field = "nothing";
				break;
		}
	}

	// The "$query_where" variable is the text that comes after "WHERE" when MySQL queries CBP's dataset. It is generated by all the optional checkboxes in the form at index.php.
	$query_where = "";
	
	// Which Border Patrol sectors, if any, did the user choose?
	if (isset($_GET["bp_sectors"]) && $_GET["bp_sectors"] != "") {
		$bp_sectors = $_GET["bp_sectors"];
		// This sends variables to the "title_gen" function, which creates the text that will appear at the top of the page to tell the user what the table is displaying. Those variables are the array of sectors selected (based on checked boxes); the maximum number of sectors (9), so that if someone checks all 9 it says "all Border Patrol sectors" instead of listing all of them; the text to show if the user checked all boxes; the text to show before showing a list of sectors; and the preposition that goes before, like "*at* Border Patrol Laredo Sector and Rio Grande Valley Sector"
		$title_bp_sectors = title_gen($bp_sectors, 9, "Border Patrol sectors", "Border Patrol", "at");
		// Adding to the query's WHERE statement a list of the selected sectors, separated by "OR" and in parentheses
		$query_where .= " AND ";
		if (isset($_GET["field_offices"]) && $_GET["field_offices"] != "") {
			$query_where .= "(";
		}
		$query_where .= " (area_of_responsibility = '" . implode("' OR area_of_responsibility = '", $bp_sectors) . "') ";
	}

	// Which CBP field offices, if any, did the user choose?
	if (isset($_GET["field_offices"]) && $_GET["field_offices"] != "") {
		$field_offices = $_GET["field_offices"];
		$title_field_offices = title_gen($field_offices, 4, "CBP Field Offices", "CBP", "at");
		// Field offices could be "OR" or "AND," depending on whether Border Patrol sectors were chosen
		if (isset($bp_sectors) && $bp_sectors != "") {
			$query_where .= " OR ";
		}
		else {
			$query_where .= " AND ";
		}
		$query_where .= " ( area_of_responsibility = '" . implode("' OR area_of_responsibility = '", $field_offices) . "') ";
		if (isset($_GET["bp_sectors"]) && $_GET["bp_sectors"] != "") {
			$query_where .= ")";
		}
	}

	// Which nationalities, if any, did the user choose?
	if (isset($_GET["nationalities"]) && $_GET["nationalities"] != "") {
		$nationalities = $_GET["nationalities"];
		$title_nationalities = title_gen($nationalities, 22, "Nationalities", "", "for migrants from");
		$query_where .= " AND (citizenship = '" . implode("' OR citizenship = '", $nationalities) . "') ";
	}

	// Which demographic categories, if any, did the user choose?
	if (isset($_GET["demographics"]) && $_GET["demographics"] != "") {
		$demographics = $_GET["demographics"];
		$title_demographics = title_gen($demographics, 4, "Demographic Categories", "", "who are");
		$query_where .= " AND (demographic = '" . implode("' OR demographic = '", $demographics) . "') ";
	}

	// Which states, if any, did the user choose?
	if (isset($_GET["states"]) && $_GET["states"] != "") {
		$states = $_GET["states"];
		$title_states = title_gen($states, 4, "States", "", "in");
		$query_where .= " AND (state = '" . implode("' OR state = '", $states) . "') ";
	}

	// Which authority titles, if any, did the user choose?
	if (isset($_GET["titles"]) && $_GET["titles"] != "") {
		$titles = $_GET["titles"];
		$title_titles = title_gen($titles, 2, "Authorities", "", "Processed By");
		$query_where .= " AND (title_of_authority = '" . implode("' OR title_of_authority = '", $titles) . "') ";
	}
	
	$title_text = "<span style='color: black;'>" . $title_time_period . "</span> Migration at the U.S.-Mexico Border, Presented by &ldquo;<span style='color:#5BA8C8'>" .  $title_organized_by . "</span>&rdquo;";

	if (isset ($title_bp_sectors)) {
		$title_text .= $title_bp_sectors;
	}
	if (isset ($title_field_offices)) {
		$title_text .= $title_field_offices;
	}
	if (isset ($title_nationalities)) {
		$title_text .= $title_nationalities;
	}
	if (isset ($title_demographics)) {
		$title_text .= $title_demographics;
	}
	if (isset ($title_states)) {
		$title_text .= $title_states;
	}
	if (isset ($title_titles)) {
		$title_text .= $title_titles;
	}
	
	// Let's grab the fiscal years that show any data, and order them from earliest to latest
	$years_stmt = $pdo->query ("SELECT DISTINCT fiscal_year FROM data WHERE land_border_region = 'Southwest Land Border' $query_where GROUP BY fiscal_year HAVING SUM(encounter_count) > 0 ORDER BY fiscal_year ASC;");
	
	while ($row = $years_stmt->fetch()) {
		$years[] = $row["fiscal_year"];
	}

	$fytd_test = "no";

function stringInArray($needle, $haystack) {
    return count(array_filter($haystack, function ($item) use ($needle) {
        return strpos($item, $needle) !== false;
    })) > 0;
}

$is_fytd = stringInArray("FYTD", $years);

	if ($is_fytd) {
		$fytd_test = "yes";
	}
	
	// This function gets rid of CBP's " (FYTD)" notation from the "year"
	
	$removeFYTD = function($text) {
		return str_replace(' (FYTD)', '', $text);
	};
	
	if ($fytd_test == "yes") {
		$years = array_map($removeFYTD, $years);
	}
	
	// Let's create a variable to remind us what the latest year in the array is (the one that will need " (FYTD)" attached to it in searches of CBP's data)
	
	$firstyear = min($years);
	if (isset ($title_titles)) {
		$lastyear = date("Y");
	}
	else {
		$lastyear = max($years);
	}	
	
	// Let's make an array of only the years that the user selected
	
	$year1 = $_GET["year1"];
	$year2 = $_GET["year2"];
	
	if ($year1 > $year2) {
		// Swap values if $int1 is greater
		$temp = $year1;
		$year1 = $year2;
		$year2 = $temp;
	}
	
	// Create an array of integers from $int1 to $int2
	$years = range($year1, $year2);
	
	// Oh by the way, if the user selected a range of years that's different than the entire panoply of years, then the title text should specify that.
	
	if ($year1 > $firstyear OR $year2 < $lastyear) {
		$title_text .= " Between <span style='color: orange;'>$year1</span> and <span style='color: orange;'>$year2</span>";
		$lastkey = array_key_last($years);
		if ($year2 == $lastyear && $fytd_test == "yes") {
			$years[$lastkey] .= " (FYTD)";
		}
		$query_where .= " AND (fiscal_year = '" . implode("' OR fiscal_year = '", $years) . "') ";
		$years = array_map($removeFYTD, $years);
	}

// Variables are now grabbed. Title text is ready to show. Let's render the web page.

?>

<html>
	<head>
		<title>
			<?php
				// Put the text in the page title that shows in the browser tab. Make sure it has no HTML formatting tags (like the "span" tags that add colors so the title looks pretty as an H2)
				$title_text_nospan = preg_replace('/<[^>]*>/', '', $title_text);
				echo $title_text_nospan; 
			?>
		</title>
		<!--There's no separate stylesheet, just this inline bit. Feel free to change any of this.-->
		<style>
			body, table {font-family: "Avenir Next", Merriweather, Verdana; font-size: 90%;}
			table, td, th {border: solid darkgray 1px;}
			input {font-size: 60%; vertical-align: middle; margin-bottom: 0.333em;}
			.footer-github {text-align:center; width: 80%; font-size: 80%;}
			th {cursor: pointer;}
			.sort-asc::after {content: " â–²";}
      .sort-desc::after {content: " â–¼";}

		</style>
		<!--Here's javascript for the "select table" button, which I grabbed from this StackOverflow response: https://stackoverflow.com/questions/2044616/select-a-complete-table-with-javascript-to-be-copied-to-clipboard-->
		<script>
				function selectElementContents(el) {
				var body = document.body, range, sel;
				if (document.createRange && window.getSelection) {
					range = document.createRange();
					sel = window.getSelection();
					sel.removeAllRanges();
					try {
						range.selectNodeContents(el);
						sel.addRange(range);
					} catch (e) {
						range.selectNode(el);
						sel.addRange(range);
					}
				} else if (body.createTextRange) {
					range = body.createTextRange();
					range.moveToElementText(el);
					range.select();
				}
			}
			
			document.addEventListener('DOMContentLoaded', function() {
					const table = document.getElementById('theTable');
					const headers = table.querySelectorAll('th');
					let isAscending = false;
					let currentSortedColumnIndex = -1;
	
					headers.forEach((header, index) => {
							header.addEventListener('click', () => {
									if (currentSortedColumnIndex !== index) {
											isAscending = false; // Descending sort order first
									} else {
											isAscending = !isAscending; // Toggle sort order
									}
									currentSortedColumnIndex = index;
									sortTable(index);
							});
					});
	
					function sortTable(columnIndex) {
							const rows = Array.from(table.rows).slice(1, -1); // Exclude header and totals row
							const totalsRow = table.rows[table.rows.length - 1];
	
							rows.sort((rowA, rowB) => {
									const cellA = rowA.cells[columnIndex].innerText.replace(/,/g, '');
									const cellB = rowB.cells[columnIndex].innerText.replace(/,/g, '');
									const a = isNaN(cellA) ? cellA : parseFloat(cellA);
									const b = isNaN(cellB) ? cellB : parseFloat(cellB);
	
									return (a > b ? 1 : -1) * (isAscending ? 1 : -1);
							});
	
							rows.forEach(row => table.tBodies[0].appendChild(row));
							table.tBodies[0].appendChild(totalsRow); // Re-append totals row to keep it at the bottom
	
							updateHeaderIndicator(columnIndex);
					}
	
					function updateHeaderIndicator(columnIndex) {
							headers.forEach((header, index) => {
									header.classList.remove('sort-asc', 'sort-desc');
									if (index === columnIndex) {
											header.classList.add(isAscending ? 'sort-asc' : 'sort-desc');
									}
							});
					}
			});
		</script>
	</head>
	<body>

<!--Add the title text with the "select table" button in an h2 block-->
<h2 style="color: #797979;"><?php echo $title_text; ?> <input type="button" value="select table" onclick="selectElementContents( document.getElementById('theTable') );"></h2>

<?php

		// Let's do a query that will populate the first column of the table (all the stuff that each row will show, like the names of Border Patrol sectors or nationalities) in order from most to least migrant "encounters." We do this now, before the "<table>" tag, because if it turns out nothing meets these criteriaâ€”people from Myanmar in the Big Bend Sector for exampleâ€”then there's no need to generate a table, just put up a "sorry" message.

if ($organized_by_query_field != "nothing") {

	$organized_by_array = array();
			
	$organized_by_stmt = $pdo->query ("SELECT DISTINCT $organized_by_query_field FROM data WHERE land_border_region = 'Southwest Land Border' $query_where GROUP BY $organized_by_query_field HAVING SUM(encounter_count) > 0 ORDER BY SUM(encounter_count) DESC;");
	
	while ($row = $organized_by_stmt->fetch()) {
		$items[] = $row[$organized_by_query_field];
	}

	if (!isset($items)) {
		echo "<p><strong>Sorry!</strong> No results for those criteria.</p>";
		exit();
	}

}

// Here comes the table.

echo "<table id='theTable'>";

// What the first column shows, like "Border Patrol Sectors"
echo "<tr><th>$title_organized_by</th>";

// Make an array of months using the abbreviations that CBP uses in its dataset
if ($time_period == "months")  {
	$test_months = array("OCT", "NOV", "DEC", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP");
}

// "$badmonths" will be an array of months where there were zero encounters with migrants who meet the chosen criteria. This variable is especially useful to hide future months in the remainder of the current fiscal year, which haven't happened yet, so we don't want to see columns for them.
$badmonths = array();

// Let's generate the rest of the first row. Years if the user chose "by year," and months and years if the user chose "by month."

foreach($years as $year) {

	if ($time_period == "years") {
	
	// Put a year in each table header cell:
		echo "<th>$year</th>";
	}

	if ($time_period == "months")  {
		foreach ($test_months as $monthkey=>$month) {

			// Call the function below that queries the database for months and years where the result is not "zero" migrant encounters

			// First, restore the "FYTD" if it's the current year, so it shows up in searches. 
			// Here, a new variable $yr is the "ugly" current year for the query. $year remains the "pretty" year that's just the 4 digits.
	
			$query_year = $year;

			if ($year == $lastyear && $fytd_test == "yes") {
				$query_year = $year . " (FYTD)";
			}

			// Then, run the query
			$mo = test_month($pdo, $query_year, $month);

	// October, November, and December of the current fiscal year are actually in the previous calendar year, so subtract 1 year for those months:	
		if ($mo == "Oct") {
			$yr = $year-1;
			}
		// Then add one when you get to January, so it knows that the calendar year changed
		if ($mo == "Jan") {
			$yr = $yr+1;
		}

			// Put the month and year in the table header cell:
			if ($mo != "none") {
				echo "<th>$mo $yr</th>";
			}

// If that month has no dataâ€”the test_month function didn't send back "none"â€”add it to the "$badmonths" array and don't generate a header cell / table column for it.
			else {
				$badmonths[] = $query_year . " " . $month;
			}
		}
	}
}

// The last column is the all-time total for each row, so its header should say "Total"
echo "<th><strong>Total</strong></th></tr>";

if ($organized_by_query_field != "nothing") {

// For each organized_by criterion (Border Patrol sector, nationality, whatever) in the array, look up the total number of migrant encounters for each month, and put it in the table cell below that month.
foreach ($items as $item) {

// First, the name of the organized_by thing. Run it through the "fix_weird" function to get rid of any weird capitalizations or abbreviations that CBP's dataset uses.
	$co = fix_weird($item);
	echo "<tr><td align='center'><strong>$co</strong></td>";

if ($time_period == "months") {

	$month_totals[] = "";

	foreach($years as $year) {
		if ($year == $lastyear && $fytd_test == "yes") {
			$year = $year . " (FYTD)";
		}
		foreach ($test_months as $month) {
			$month_totals["$month$year"] = get_total_month($pdo, $year, $month, $query_where);
		}
	}
	
	foreach($years as $year) {
	
		if ($year == $lastyear && $fytd_test == "yes") {
			$year = $year . " (FYTD)";
		}

		foreach ($test_months as $month) {
	
// Run the function below that gets the number for that organized_by thing and month. Put it in the corresponding table cell.
			// First make sure the month isn't in the "$badmonths" array, and skip it if it is
			$test_bad_month = $year . " " . $month;
			if (!in_array($test_bad_month, $badmonths)) {
				// Call the query that gets the number of migrant encounter for that month and the chosen set of criteria
				$amt = get_amount_month($pdo, $year, $month, $organized_by_query_field, $item, $query_where);
				
				// Fancy it up with a tooltip that shows the percentage for that month
				$tot = $month_totals["$month$year"];
				$num1 = floatval(str_replace(",", "", $amt));
				$num2 = floatval(str_replace(",", "", $tot));
				if ($num2 != 0) {
					$pct = number_format(($num1 / $num2 * 100), 0) . "%";
				}
				else {
					$pct = "âˆž";
				}
				
				// Put the result in a table cell, right-aligned like numbers often are in spreadsheets
				echo "<td align='right' title='$pct'>$amt</td>";
			}
		}	
	}
}

if ($time_period == "years") {

	$year_totals[] = "";
	foreach ($years as $year) {
		if ($year == $lastyear && $fytd_test == "yes") {
			$year = $year . " (FYTD)";
		}
		$year_totals["$year"] = get_total_year($pdo, $year, $query_where);
	}

	foreach($years as $year) {
	
		if ($year == $lastyear && $fytd_test == "yes") {
			$year = $year . " (FYTD)";
		}

// Run the function below that gets the number for that organized_by thing and year. Put it in the corresponding table cell.
			$amt = get_amount_year($pdo, $year, $organized_by_query_field, $item, $query_where);
		
			// Fancy it up with a tooltip that shows the percentage for that month
			$tot = $year_totals["$year"];
			$num1 = floatval(str_replace(",", "", $amt));
			$num2 = floatval(str_replace(",", "", $tot));
			if ($num2 != 0) {
				$pct = number_format(($num1 / $num2 * 100), 0) . "%";
			}
			else {
				$pct = "âˆž";
			}
			
			// Put the result in a table cell, right-aligned like numbers often are in spreadsheets
			echo "<td align='right' title='$pct'>$amt</td>";
	}
}

// The last column is the all-time total for that organized_by thing, so send it to a function that queries the dataset for that thing without specifying any months or years.
$amt = get_total_item($pdo, $organized_by_query_field, $item, $query_where);
$full_total = get_total($pdo, $query_where);
$num1 = floatval(str_replace(",", "", $amt));
$num2 = floatval(str_replace(",", "", $full_total));
if ($num2 != 0) {
	$pct = number_format(($num1 / $num2 * 100), 0) . "%";
}
else {
	$pct = "âˆž";
}
			
			// Put the result in a table cell, right-aligned like numbers often are in spreadsheets
			echo "<td align='right'  title='$pct'><strong>$amt</strong></td>";

}
	echo "</tr>";
	// This repeats for each row until there are no more "organized_by" things.
}

	// Now, a row of totals for each month/year.
	echo "<tr><td align='center'><strong>Total</strong></td>";
	
if ($time_period == "months") {
	
	foreach($years as $year) {

		if ($year == $lastyear && $fytd_test == "yes") {
			$year = $year . " (FYTD)";
		}

		foreach ($test_months as $month) {
	
// Run the function below that gets the number for all migrant encounters that month (if the user chose monthly data) that meet the chosen criteria. Put it in the corresponding table cell.
			$test_bad_month = $year . " " . $month;
			if (!in_array($test_bad_month, $badmonths)) {
				if ($organized_by_query_field != "nothing") {
					$amt = $month_totals["$month$year"];
				}
				else {
					$amt = get_total_month($pdo, $year, $month, $query_where);
				}
		
				echo "<td align='right'><strong>$amt</strong></td>";
			}
		}	
	}
}

if ($time_period == "years") {

	foreach($years as $year) {
	
		if ($year == $lastyear && $fytd_test == "yes") {
			$year = $year . " (FYTD)";
		}

// Run the function below that gets the number for all migrant encounters that year (if the user chose yearly data) that meet the chosen criteria. Put it in the corresponding table cell.
				if ($organized_by_query_field != "nothing") {
					$amt = $year_totals["$year"];
				}
				else {
					$amt = get_total_year($pdo, $year, $query_where);
				}
		
				echo "<td align='right'><strong>$amt</strong></td>";
	}
}

// The bottom right cell is the overall total of every migrant encounter that met the chosen criteria since FY 2020. Let's run the function that queries the dataset for that.

				if ($organized_by_query_field != "nothing") {
					echo "<td align='right'><strong>$full_total</strong></td>";
				}
				else {
					$full_total = get_total($pdo, $query_where);
					echo "<td align='right'><strong>$full_total</strong></td>";
				}

echo "</tr>";

// And that's it. Close the <table> and the entire page.
?>
		</table>
		<p>
			<a href="/">Back to the search form</a>
		</p>
		<?php require_once 'footer.php'; ?>
	</body>
</html>

<?php

// This function generates a sentence, which appears in the title at the top of the page and in the title of the web page's <head> section, telling you what the table is displaying.
// The "<span>" tags change the color of bits of text in the title, matching the colors of the section headers used in the form on index.php: black for year/month, blue for organized_by thing, and green for other criteria, if any.
function title_gen($items, $max_num, $all_sel_text, $item_text, $preposition) {
	$text = " $preposition ";
	// Did the user choose all checkboxes for an item? Then don't list them all in the title, just say "All whatever."
	if (count($items) == $max_num) {
		$text .= "&ldquo;<span style='color: 7CAE6C'>All $all_sel_text" . "</span>&rdquo; ";
	}
	else {
		// Otherwise we have to generate a list of chosen items separated by commas. This will make for a long title if the user chose like 17 countries, but there's no other way to explain to a viewer what the table is displaying.
		$i = 1;
		$text .= " &ldquo;<span style='color: 7CAE6C'>";
		if ($item_text != "") {
			$item_text . " ";
		}
		// For each item, get rid of any weird CBP notation and separate with commas until the second-to-last one.
		foreach($items as $item) {
			$item = fix_weird($item);
			$i++;
			$text .= $item;
			if ($i < count($items)) {
				$text .= ", ";
			}
			if ($i == count($items)) {
				if (count($items) > 2) {
					$text .= ", ";
				}
					$text .= " and ";
			}
		}
		$text .= "</span>&rdquo; ";
	}
	return $text;
}

// A few things in CBP's dataset are clunky to read-- all uppercase letters, weird abbreviations, etc. This makes them easier to comprehend.
function fix_weird($co) {
	$co = ucwords(strtolower($co));
	switch ($co) {
		case "Other":
			$co = "Other Countries";
			break;
		case "China, Peoples Republic Of":
			$co = "China";
			break;
		case "Myanmar (burma)":
			$co = "Myanmar (Burma)";
			break;
		case "Fmua":
			$co = "Family Unit Members";
			break;
		case "Uc / Single Minors":
			$co = "Unaccompanied Children / Single Minors";
			break;
		case "U.s. Border Patrol":
			$co = "Between the Ports of Entry (Border Patrol)";
			break;
		case "Office Of Field Operations":
			$co = "At the Ports of Entry (CBP Office of Field Operations)";
			break;
		case "Tx":
			$co = "Texas";
			break;
		case "Az":
			$co = "Arizona";
			break;
		case "Nm":
			$co = "New Mexico";
			break;
		case "Ca":
			$co = "California";
			break;
	}
	return $co;
}

// Database query that gets all months that have more than zero encounters, for the top row of the table.
function test_month($pdo, $year, $month) {
	$stmt = $pdo->prepare("SELECT month_abbv FROM data WHERE fiscal_year =:year AND month_abbv = :month AND land_border_region = 'Southwest Land Border' GROUP BY month_abbv HAVING SUM(encounter_count) > 0 LIMIT 1");
	$stmt->execute(['year' => $year, 'month' => $month]); 
	$mo = $stmt->fetch();
	
	if (is_array($mo)) {
		$mon = ucwords(strtolower($mo[0]));
	}

// If there aren't any encounters, return "none" and the month will get added to the $badmonths array, which means it won't be rendered in the table.
	else {
		$mon = "none";
	}
return $mon;
}

// If the user chose "by month," this query gets the total number of migrant encounters for that month and organized_by thing, meeting the criteria that the user chose.
function get_amount_month($pdo, $year, $month, $organized_by_query_field, $item, $query_where) {

	$stmt = $pdo->prepare("SELECT SUM(encounter_count) FROM `data` WHERE $organized_by_query_field = '$item' AND land_border_region = 'Southwest Land Border' $query_where AND fiscal_year = :year AND month_abbv = :month;");
	$stmt->execute(['year' => $year, 'month' => $month]); 
	$amt = $stmt->fetch();
	
return number_format($amt[0] ?? 0,0,".",",");
}

// If the user chose "by year," this query gets the total number of migrant encounters for that year and organized_by thing, meeting the criteria that the user chose.
function get_amount_year($pdo, $year, $organized_by_query_field, $item, $query_where) {

	$stmt = $pdo->prepare("SELECT SUM(encounter_count) FROM `data` WHERE $organized_by_query_field = '$item' AND land_border_region = 'Southwest Land Border' $query_where AND fiscal_year = :year ");
	$stmt->execute(['year' => $year]); 
	$amt = $stmt->fetch();
		
return number_format($amt[0],0,".",",");
}

// This function gets the all-time (since 2020) total migrant encounters for that organized_by thing (like "Rio Grande Valley Sector" or "Guatemala" or whatever), that meet the chosen criteria.
function get_total_item($pdo, $organized_by_query_field, $item, $query_where) {

	$stmt = $pdo->prepare("SELECT SUM(encounter_count) FROM `data` WHERE $organized_by_query_field = '$item' AND land_border_region = 'Southwest Land Border' $query_where ");
	$stmt->execute(); 
	$amt = $stmt->fetch();
	
return number_format($amt[0],0,".",",");
}

// If the user chose "by month," this function gets the total migrant encounters that meet the chosen criteria for a month, for the bottom row of the table.
function get_total_month($pdo, $year, $month, $query_where) {

	$stmt = $pdo->prepare("SELECT SUM(encounter_count) FROM `data` WHERE land_border_region = 'Southwest Land Border' $query_where AND fiscal_year = :year AND month_abbv = :month;");
	$stmt->execute(['year' => $year, 'month' => $month]); 
	$amt = $stmt->fetch();
		
return number_format($amt[0],0,".",",");
}

// If the user chose "by year," this function gets the total migrant encounters that meet the chosen criteria for a year, for the bottom row of the table.
function get_total_year($pdo, $year, $query_where) {

	$stmt = $pdo->prepare("SELECT SUM(encounter_count) FROM `data` WHERE land_border_region = 'Southwest Land Border' $query_where AND fiscal_year = :year ");
	$stmt->execute(['year' => $year]); 
	$amt = $stmt->fetch();
		
return number_format($amt[0],0,".",",");
}

// This function gets the total migrant encounters that meet the chosen criteria for all-time, for the bottom right cell of the table.
function get_total($pdo, $query_where) {

	$stmt = $pdo->prepare("SELECT SUM(encounter_count) FROM `data` WHERE land_border_region = 'Southwest Land Border' $query_where ");
	$stmt->execute(); 
	$amt = $stmt->fetch();
		
return number_format($amt[0],0,".",",");
}

?>